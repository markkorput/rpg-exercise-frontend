// Generated by CoffeeScript 1.6.3
(function() {
  var AdminView, GameListView, QuestionListView, UserListView, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.GameView = (function(_super) {
    __extends(GameView, _super);

    function GameView() {
      _ref = GameView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GameView.prototype.initialize = function() {
      var games, no_func, yes_func,
        _this = this;
      this.admin_view = new AdminView();
      games = new GameList();
      this.game = games.create({});
      this.game_states = new Backbone.Collection([this.getCurrentState()]);
      this.render();
      this.$el.hide();
      this.game_ui = new GameUi();
      this.game_visuals = new GameVisuals({
        game_states: this.game_states
      });
      yes_func = (function() {
        var _this = this;
        return this.game_visuals.answerYesTween().start().onComplete(function() {
          return _this.trigger('answer', _this.getAnswer('yes'));
        });
      });
      no_func = (function() {
        var _this = this;
        return this.game_visuals.answerNoTween().start().onComplete(function() {
          return _this.trigger('answer', _this.getAnswer('no'));
        });
      });
      this.game_ui.on('answer-yes', yes_func, this);
      this.game_ui.on('answer-no', no_func, this);
      this.game_ui.on('toggle-stats', (function() {
        return this.$el.toggle();
      }), this);
      this.game_visuals.on('answer-yes', yes_func, this);
      this.game_visuals.on('answer-no', no_func, this);
      this.on('answer', (function(answer) {
        return this.game.submitAnswer(answer);
      }), this);
      this.game.on('change', this.renderGame, this);
      this.game.on('change', this.renderStats, this);
      this.game.user.on('change', this.renderStats, this);
      this.game.submissions.on('change', this.renderStats, this);
      this.game.submissions.on('add', (function() {
        return this.game_states.add([this.getCurrentState()]);
      }), this);
      this.game.on('new-question', (function(question) {
        return this.game_visuals.showQuestion(question);
      }), this);
      this.on('answer', function() {
        _this.game.save();
        return _this.game.user.save();
      });
      return this.game.nextQuestion();
    };

    GameView.prototype.game_el = function() {
      return this.$el.find('#current-question');
    };

    GameView.prototype.stats_el = function() {
      return this.$el.find('#game-stats');
    };

    GameView.prototype.getAnswer = function(txt) {
      return _.find(this.game.current_question().get('answers') || [], function(answer) {
        return answer.get('text').toLowerCase() === txt.toLowerCase();
      });
    };

    GameView.prototype.getCurrentState = function() {
      return new Backbone.Model({
        number_of_answers: this.game.submissions.length,
        skills: this.game.user.skillsClone()
      });
    };

    GameView.prototype.render = function() {
      this.$el.html('<h1>Next Question</h1><div id="current-question"></div><h1>Game Stats</h1><ul id="game-stats"></ul>');
      this.$el.append(this.admin_view.render().el);
      this.renderGame();
      this.renderStats();
      return this;
    };

    GameView.prototype.renderGame = function() {
      var q,
        _this = this;
      this.game_el().html('');
      if (q = this.game.current_question()) {
        this.game_el().append('<h2>' + q.get('text') + '</h2>');
        return _.each(q.get('answers'), function(answer) {
          var button;
          button = $('<button>' + answer.get('text') + '</button>');
          button.on('click', function(event) {
            return _this.trigger('answer', answer);
          });
          return _this.game_el().append(button);
        });
      }
    };

    GameView.prototype.renderStats = function() {
      var skills_el, skills_line, state;
      this.stats_el().html('');
      state = this.getCurrentState();
      if (this.game.user) {
        this.stats_el().append('<li>User: ' + this.game.user.get('name') + '</li>');
      }
      this.stats_el().append('<li>Questions answered: ' + state.get('number_of_answers') + '</li>');
      skills_el = $('<ul></ul>');
      (state.get('skills') || new Backbone.Collection).each(function(skill) {
        return skills_el.append('<li>' + skill.get('text') + ': ' + skill.get('score') + '</li>');
      });
      skills_line = $('<li></li>');
      skills_line.append(skills_el);
      return this.stats_el().append(skills_line);
    };

    return GameView;

  })(Backbone.View);

  QuestionListView = (function(_super) {
    __extends(QuestionListView, _super);

    function QuestionListView() {
      _ref1 = QuestionListView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    QuestionListView.prototype.tagName = "ul";

    QuestionListView.prototype.className = "questions-list";

    QuestionListView.prototype.initialize = function() {
      this.questions = new QuestionList;
      return this.questions.fetch();
    };

    QuestionListView.prototype.render = function() {
      var _this = this;
      this.$el.html('<h1>Questions</h1>');
      this.questions.each(function(question) {
        var answers;
        answers = _.map(question.get('answers') || [], function(answer) {
          return answer.get('text');
        });
        return _this.$el.append('<li>' + question.get('text') + ' (' + answers.join(', ') + ')</li>');
      });
      return this;
    };

    return QuestionListView;

  })(Backbone.View);

  UserListView = (function(_super) {
    __extends(UserListView, _super);

    function UserListView() {
      _ref2 = UserListView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    UserListView.prototype.tagName = "ul";

    UserListView.prototype.className = "users-list";

    UserListView.prototype.initialize = function() {
      this.users = new UserList;
      return this.users.fetch();
    };

    UserListView.prototype.render = function() {
      var _this = this;
      this.$el.html('<h1>Users</h1>');
      this.users.each(function(user) {
        var skills_el, skills_line;
        _this.$el.append('<li>Name: ' + user.get('name') + '</li>');
        skills_el = $('<ul></ul>');
        user.skills.each(function(skill) {
          return skills_el.append('<li>' + skill.get('text') + ': ' + skill.get('score') + '</li>');
        });
        skills_line = $('<li></li>');
        skills_line.append(skills_el);
        return _this.$el.append(skills_line);
      });
      return this;
    };

    return UserListView;

  })(Backbone.View);

  GameListView = (function(_super) {
    __extends(GameListView, _super);

    function GameListView() {
      _ref3 = GameListView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    GameListView.prototype.tagName = "ul";

    GameListView.prototype.className = "games-list";

    GameListView.prototype.initialize = function() {
      this.games = new GameList;
      return this.games.fetch();
    };

    GameListView.prototype.render = function() {
      var _this = this;
      this.$el.html('<h1>Games</h1>');
      this.games.each(function(game) {
        return _this.$el.append('<li>Creation Date: ' + game.get('created_at') + '</li>');
      });
      return this;
    };

    return GameListView;

  })(Backbone.View);

  AdminView = (function(_super) {
    __extends(AdminView, _super);

    function AdminView() {
      _ref4 = AdminView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    AdminView.prototype.tagName = 'div';

    AdminView.prototype.className = 'admin-info';

    AdminView.prototype.initialize = function() {
      this.games_view = new GameListView();
      this.users_view = new UserListView();
      this.questions_view = new QuestionListView();
      this.render();
      return this.users_view.users.on('change', this.render, this);
    };

    AdminView.prototype.render = function() {
      this.$el.html('');
      this.$el.append(this.games_view.render().el);
      this.$el.append(this.users_view.render().el);
      this.$el.append(this.questions_view.render().el);
      return this;
    };

    return AdminView;

  })(Backbone.View);

}).call(this);
